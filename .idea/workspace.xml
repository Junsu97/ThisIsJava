<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="e8b00e86-7b1a-4908-8598-c02f1acce6e2" name="Changes" comment="----이것이 자바다----&#10;ch8&#10;다중 인터페이스&#10;인터페이스의 상속&#10;&#10;구현 객체는 여러개의 인터페이스를 implements할 수 있다.&#10;구현 객체가 어떤 인터페이스 변수에 대입되느냐에 따라 변수를 통해 호출할 수 있는 추상 메소드가 결정된다.&#10;&#10;인터페이스도 다른 인터페이스를 상속할 수 있으며, 클래스와는 달리 다중상속을 허용한다.&#10;자식 인터페이스의 구현 클래스는 자식 인터페이스의 메소드뿐만 아니라 부모인터페이스의 모든 추상메소드를 재정의 해야한다.">
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam01/A.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam01/B.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam01/C.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam01/D.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam01/E.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam01/PromotionExample.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam02/Bus.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam02/CastingExample.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ch08/sec10/exam02/Vehicle.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Enum" />
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="workspaceImportEnabled" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="2OHBPf8QB7n3WDjeuXXFwp7e8t6" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/myJavaPRJ/ThisIsJava/src/main/java/ch08/sec06&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\myJavaPRJ\ThisIsJava\src\main\java\ch08\sec06" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="ch08.sec05" />
    </key>
  </component>
  <component name="RunManager" selected="Application.PhoneExample">
    <configuration name="BandQ1" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="test.BandQ1" />
      <module name="ThisIsJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="test.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ChildExample" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ch07.sec07.exam03.ChildExample" />
      <module name="ThisIsJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ch07.sec07.exam03.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="InstanceOfExample" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ch07.sec09.InstanceOfExample" />
      <module name="ThisIsJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ch07.sec09.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="PhoneExample" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ch07.sec10.exam01.PhoneExample" />
      <module name="ThisIsJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ch07.sec10.exam01.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SupersonicAirplaneExample" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ch07.sec04.exam02.SupersonicAirplaneExample" />
      <module name="ThisIsJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ch07.sec04.exam02.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.PhoneExample" />
        <item itemvalue="Application.InstanceOfExample" />
        <item itemvalue="Application.ChildExample" />
        <item itemvalue="Application.BandQ1" />
        <item itemvalue="Application.SupersonicAirplaneExample" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e8b00e86-7b1a-4908-8598-c02f1acce6e2" name="Changes" comment="" />
      <created>1681207605714</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1681207605714</updated>
      <workItem from="1681207607045" duration="297000" />
      <workItem from="1681207949041" duration="2831000" />
      <workItem from="1682520446364" duration="41000" />
      <workItem from="1682597942602" duration="1718000" />
      <workItem from="1682673359204" duration="865000" />
      <workItem from="1682817658107" duration="325000" />
      <workItem from="1682920054594" duration="66000" />
      <workItem from="1683185590002" duration="1418000" />
      <workItem from="1683279830120" duration="3497000" />
      <workItem from="1683536366489" duration="912000" />
      <workItem from="1683628073961" duration="1037000" />
      <workItem from="1683632928143" duration="903000" />
      <workItem from="1683790981799" duration="971000" />
      <workItem from="1683888608882" duration="975000" />
      <workItem from="1684143324910" duration="1358000" />
      <workItem from="1684156203352" duration="15000" />
      <workItem from="1684227220997" duration="1820000" />
      <workItem from="1684231034052" duration="674000" />
      <workItem from="1684331396249" duration="720000" />
      <workItem from="1684393560708" duration="1187000" />
      <workItem from="1684759781643" duration="1258000" />
      <workItem from="1684843788900" duration="983000" />
    </task>
    <task id="LOCAL-00001" summary="----이것이 자바다----&#10;ch6&#10;생성자&#10;메소드 예제">
      <created>1682520463935</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1682520463935</updated>
    </task>
    <task id="LOCAL-00002" summary="----이것이 자바다----&#10;ch6&#10;가변길이 매개변수&#10;메소드 오버로딩">
      <created>1682599626063</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1682599626063</updated>
    </task>
    <task id="LOCAL-00003" summary="----이것이 자바다----&#10;ch6&#10;final 필드와&#10;상수">
      <created>1682674150495</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1682674150495</updated>
    </task>
    <task id="LOCAL-00004" summary="----이것이 자바다----&#10;ch6&#10;접근 제한자&#10;Getter와 Setter&#10;Singleton 패턴">
      <created>1683187002050</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1683187002051</updated>
    </task>
    <task id="LOCAL-00005" summary="----이것이 자바다----&#10;ch7&#10;상속&#10;super() - 부모의 기본 생성자 호출&#10;&#10;자식 객체를 생성하면 부모객체가 먼저 생성된 다음에 자식 객체가 생성된다.&#10;부모 생성자는 자식 생성자의 맨 첫줄에 숨겨져 있는 super()에 의해 호출된다&#10;&#10;부모 클래스가 기본생성자를 가지고 있는 경우에는 super()가 컴파일 과정중에 자동으로 추가되어 생략가능하지만&#10;&#10;부모 클래스가 매개변수를 갖는 생성자를 가지고 있을 경우 super()를 반드시 작성해야 한다.">
      <created>1683283666974</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1683283666974</updated>
    </task>
    <task id="LOCAL-00006" summary="----이것이 자바다----&#10;ch7&#10;상속&#10;super() - 부모의 기본 생성자 호출&#10;&#10;자식 객체를 생성하면 부모객체가 먼저 생성된 다음에 자식 객체가 생성된다.&#10;부모 생성자는 자식 생성자의 맨 첫줄에 숨겨져 있는 super()에 의해 호출된다&#10;&#10;부모 클래스가 기본생성자를 가지고 있는 경우에는 super()가 컴파일 과정중에 자동으로 추가되어 생략가능하지만&#10;&#10;부모 클래스가 매개변수를 갖는 생성자를 가지고 있을 경우 super()를 반드시 작성해야 한다.">
      <created>1683283676069</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1683283676069</updated>
    </task>
    <task id="LOCAL-00007" summary="----이것이 자바다----&#10;ch7&#10;상속&#10;super() - 부모의 기본 생성자 호출&#10;&#10;자식 객체를 생성하면 부모객체가 먼저 생성된 다음에 자식 객체가 생성된다.&#10;부모 생성자는 자식 생성자의 맨 첫줄에 숨겨져 있는 super()에 의해 호출된다&#10;&#10;부모 클래스가 기본생성자를 가지고 있는 경우에는 super()가 컴파일 과정중에 자동으로 추가되어 생략가능하지만&#10;&#10;부모 클래스가 매개변수를 갖는 생성자를 가지고 있을 경우 super()를 반드시 작성해야 한다.">
      <created>1683283684193</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1683283684193</updated>
    </task>
    <task id="LOCAL-00008" summary="----이것이 자바다----&#10;ch7&#10;메소드 오버라이딩&#10;부모 메소드 호출&#10;&#10;메소드 오버라이딩 시 주의사항&#10;1.부모 메소드의 선언부(리턴 타입, 메소드 이름, 매개변수)와 동일해야한다.&#10;2.접근 제한을 더 강하게 오버라이딩할 수 없다.(public -&gt; private 불가)&#10;3.새로운 예외를 throws할 수 없다.&#10;&#10;부모 메소드의 내용을 가지고 오고싶을때는 &#10;super.메소드이름을 사용한다.&#10;&#10;부모클래서에서 작선된 메소드에 내용을 추가할 때는 용이하지만 내용을 바꿀 때는 이용할 수 없다.">
      <created>1683537277586</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1683537277586</updated>
    </task>
    <task id="LOCAL-00009" summary="----이것이 자바다----&#10;ch7&#10;final 클래스 &#10;final 메소드&#10;protected 접근 제한자&#10;&#10;final 클래스는 더이상 자식 클래스를 가질 수 없다. 즉 상속 불가&#10;&#10;final 메소드는 메소드 오버라이딩을 할 수 없다.&#10;&#10;protected 접근제한자&#10;같은 패키지에서는 default 처럼 접근이 가능하나 다른 패키지에서는 자식 클래스만 접근을 허용한다&#10;new 연산자를 통해 객체를 직접 생성하여 이용할 수 없고 오로지 상속을 통해서만 이용이 가능하다.">
      <created>1683629103609</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1683629103609</updated>
    </task>
    <task id="LOCAL-00010" summary="----이것이 자바다----&#10;ch7&#10;final 클래스 &#10;final 메소드&#10;protected 접근 제한자&#10;&#10;final 클래스는 더이상 자식 클래스를 가질 수 없다. 즉 상속 불가&#10;&#10;final 메소드는 메소드 오버라이딩을 할 수 없다.&#10;&#10;protected 접근제한자&#10;같은 패키지에서는 default 처럼 접근이 가능하나 다른 패키지에서는 자식 클래스만 접근을 허용한다&#10;new 연산자를 통해 객체를 직접 생성하여 이용할 수 없고 오로지 상속을 통해서만 이용이 가능하다.">
      <created>1683635785791</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1683635785791</updated>
    </task>
    <task id="LOCAL-00011" summary="----이것이 자바다----&#10;ch7&#10;클래스의 자동 타입 변환&#10;클래스의 강제 타입 변환&#10;&#10;----자동 타입 변환------&#10;클래스의 타입 변환은 상속관계에 있는 클래스 사이에서 발생한다.&#10;바로 위의 부모가 아니더라도 상속계층에서 상위 타입이라면 자동 타입변환이 일어날 수 있다.&#10;&#10;부모 타입으로 자동타입 변환된 이후에는 부모 클래스에 선언된 필드와 메소드만 접근이 가능하고 자식 클래스에서 오버라이딩된 메소드가 있다면 부모 메소드 대신 오버라이딩된 메소드가 호출된다.&#10;&#10;----강제 타입 변환------&#10;캐스팅 연산자로 강제 타입 변환을 할 수 있다.&#10;&#10;자식 객체가 부모타입으로 자동 변환하면 부모타입에서 선언된 필드와 메소드만 사용가능하다는 제약사항이 있다.&#10;만약 자식 타입에 선언된 필드와 메소드를 꼭 사용해야 한다면 강제 타입 변환을 해서 다시 자식 타입으로 변환해야 한다.">
      <created>1683791944475</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1683791944476</updated>
    </task>
    <task id="LOCAL-00012" summary="----이것이 자바다----&#10;ch7&#10;다형성&#10;필드 다형성&#10;매개변수의 다형성&#10;&#10;다형성이란 사용방법은 동일하지만 실행결과가 다양하게 나오는 성질을 말한다.&#10;&#10;객체 사용방법이 동일하다는 것은 동일한 메소드를 가지고 있다는 뜻이다.&#10;&#10;&#10;------필드 다형성------&#10;필드 타입은 동일하지만, 대입되는 객체가 달라져서 실행결과가 다양하게 나올 수 있는 것을 말한다.&#10;&#10;----매개변수 다형성---&#10;메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 호출할 때 동일한 타입의 객체를 제공하는 것이 정석이지만 자식객체를 제공할 수도 있다. 여기서 다형성이 발생한다.">
      <created>1683889539448</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1683889539448</updated>
    </task>
    <task id="LOCAL-00013" summary="----이것이 자바다----&#10;ch7&#10;다형성&#10;필드 다형성&#10;매개변수의 다형성&#10;&#10;다형성이란 사용방법은 동일하지만 실행결과가 다양하게 나오는 성질을 말한다.&#10;&#10;객체 사용방법이 동일하다는 것은 동일한 메소드를 가지고 있다는 뜻이다.&#10;&#10;&#10;------필드 다형성------&#10;필드 타입은 동일하지만, 대입되는 객체가 달라져서 실행결과가 다양하게 나올 수 있는 것을 말한다.&#10;&#10;----매개변수 다형성---&#10;메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 호출할 때 동일한 타입의 객체를 제공하는 것이 정석이지만 자식객체를 제공할 수도 있다. 여기서 다형성이 발생한다.">
      <created>1683889551368</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1683889551368</updated>
    </task>
    <task id="LOCAL-00014" summary="----이것이 자바다----&#10;ch7&#10;다형성&#10;필드 다형성&#10;매개변수의 다형성&#10;&#10;다형성이란 사용방법은 동일하지만 실행결과가 다양하게 나오는 성질을 말한다.&#10;&#10;객체 사용방법이 동일하다는 것은 동일한 메소드를 가지고 있다는 뜻이다.&#10;&#10;&#10;------필드 다형성------&#10;필드 타입은 동일하지만, 대입되는 객체가 달라져서 실행결과가 다양하게 나올 수 있는 것을 말한다.&#10;&#10;----매개변수 다형성---&#10;메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 호출할 때 동일한 타입의 객체를 제공하는 것이 정석이지만 자식객체를 제공할 수도 있다. 여기서 다형성이 발생한다.">
      <created>1683889564899</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1683889564899</updated>
    </task>
    <task id="LOCAL-00015" summary="----이것이 자바다----&#10;ch7&#10;instanceof&#10;추상 메소드&#10;추상 클래스&#10;-------instanceof-----&#10;변수가 참조하는 객체의 타입을 확인하고자 할때 사용한다&#10;instanceof연산자의 좌항에는 객체가 우항에는 타입이 오고&#10;좌항의 객체가 우항의 타입이 아니면 true를 그렇지 않다면 false를 리턴&#10;-------추상클래스------&#10;클래스들의 공통적인 필드나 메소드를 추출해서 선언한 클래스를 추상클래스 라고 한다&#10;추상클래스는 실체 클래스의 부모역할을 한다.&#10;&#10;new 연산자를 사용해서 객체를 직접 생성할 수 없고 extends 뒤에만 올수 있다.&#10;&#10;&#10;------추상 메소드-------&#10;추상메소드는 추상클래스 내에서만 선언할 수 있고, 메소드 실행내용인 중괄호가 없다.&#10;&#10;추상메소드는 자식클래스의 공통 메소드라는 것만 정의할뿐 실행내용을 가지지 않는다.&#10;&#10;추상메소드는 반드시 자식클래스에서 재정의해서 실행 내용을 채워야한다.">
      <created>1684144671320</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1684144671320</updated>
    </task>
    <task id="LOCAL-00016" summary="----이것이 자바다----&#10;ch7&#10;interface&#10;&#10;인터페이스는 두 객체를 연결하는 역할을 한다.&#10;인터페이스는 다형성을 구현하는 방법중 하나이다.&#10;&#10;인터페이스는 default 와 public 접근제한자를 가질 수 있다.&#10;인터페이스는 상수 필드 추상메소드 디폴트 메소드 정적 메소드 등을 가질 수 있고&#10;&#10;필드에서 별다른 제약을 주지 않아도 기본적으로 상수로 선언되며&#10;메소드는 형식을 선언하지 않으면 기본 추상메소드로 생성된다.">
      <created>1684228440625</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1684228440625</updated>
    </task>
    <task id="LOCAL-00017" summary="----이것이 자바다----&#10;ch8&#10;interface의 디폴트 메소드&#10;&#10;인터페이스에는 완전한 실행코드를 가진 디폴트 메소드를 선언할 수 있다.&#10;디폴트 메소드의 실행부에는 상수필드를 읽거나 추상메소드를 호출하는 코드를 작성할 수 있다.&#10;&#10;디폴트 메소드는 구현 객체가 필요한 메소드이다.&#10;구현 클래스는 디폴트 메소드를 재정의 해서 자신에게 맞게 수정할 수도 있지만,&#10;재정의시 public 접근 제한자를 반드시 붙여야 하고, default 키워드를 생략해야 한다.">
      <created>1684332105194</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1684332105194</updated>
    </task>
    <task id="LOCAL-00018" summary="----이것이 자바다----&#10;ch8&#10;interface의 정적메소드&#10;interface의 private 메소드&#10;&#10;interface의 private 메소드 &#10;Java 9 부터 사용가능&#10;&#10;interface의 정적 메소드&#10;인터페이스 자체의 기능을 위해 선언한다.&#10;정적메소드는 구현객체가 없어도 인터페이스만으로 호출할 수 있고&#10;public 을 생략하더라도 자동으로 컴파이로가정에서 붙는 것이 차이점이다.&#10;&#10;정적 메소드의 실행부를 작성할 때 주의할 점은 상수필드를 제외한 추상메소드,디폴트메소드,private메소드 등을 호출할 수 없다는 것이다.">
      <created>1684394730183</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1684394730183</updated>
    </task>
    <task id="LOCAL-00019" summary="----이것이 자바다----&#10;ch8&#10;interface의 정적메소드&#10;interface의 private 메소드&#10;&#10;interface의 private 메소드 &#10;Java 9 부터 사용가능&#10;&#10;interface의 정적 메소드&#10;인터페이스 자체의 기능을 위해 선언한다.&#10;정적메소드는 구현객체가 없어도 인터페이스만으로 호출할 수 있고&#10;public 을 생략하더라도 자동으로 컴파이로가정에서 붙는 것이 차이점이다.&#10;&#10;정적 메소드의 실행부를 작성할 때 주의할 점은 상수필드를 제외한 추상메소드,디폴트메소드,private메소드 등을 호출할 수 없다는 것이다.">
      <created>1684394744108</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1684394744108</updated>
    </task>
    <task id="LOCAL-00020" summary="----이것이 자바다----&#10;ch8&#10;다중 인터페이스&#10;인터페이스의 상속&#10;&#10;구현 객체는 여러개의 인터페이스를 implements할 수 있다.&#10;구현 객체가 어떤 인터페이스 변수에 대입되느냐에 따라 변수를 통해 호출할 수 있는 추상 메소드가 결정된다.&#10;&#10;인터페이스도 다른 인터페이스를 상속할 수 있으며, 클래스와는 달리 다중상속을 허용한다.&#10;자식 인터페이스의 구현 클래스는 자식 인터페이스의 메소드뿐만 아니라 부모인터페이스의 모든 추상메소드를 재정의 해야한다.">
      <created>1684761030335</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1684761030335</updated>
    </task>
    <option name="localTasksCounter" value="21" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="----이것이 자바다----&#10;ch6&#10;생성자&#10;메소드 예제" />
    <MESSAGE value="----이것이 자바다----&#10;ch6&#10;가변길이 매개변수&#10;메소드 오버로딩" />
    <MESSAGE value="----이것이 자바다----&#10;ch6&#10;final 필드와&#10;상수" />
    <MESSAGE value="----이것이 자바다----&#10;ch6&#10;접근 제한자&#10;Getter와 Setter&#10;Singleton 패턴" />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;상속&#10;super() - 부모의 기본 생성자 호출&#10;&#10;자식 객체를 생성하면 부모객체가 먼저 생성된 다음에 자식 객체가 생성된다.&#10;부모 생성자는 자식 생성자의 맨 첫줄에 숨겨져 있는 super()에 의해 호출된다&#10;&#10;부모 클래스가 기본생성자를 가지고 있는 경우에는 super()가 컴파일 과정중에 자동으로 추가되어 생략가능하지만&#10;&#10;부모 클래스가 매개변수를 갖는 생성자를 가지고 있을 경우 super()를 반드시 작성해야 한다." />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;메소드 오버라이딩&#10;부모 메소드 호출&#10;&#10;메소드 오버라이딩 시 주의사항&#10;1.부모 메소드의 선언부(리턴 타입, 메소드 이름, 매개변수)와 동일해야한다.&#10;2.접근 제한을 더 강하게 오버라이딩할 수 없다.(public -&gt; private 불가)&#10;3.새로운 예외를 throws할 수 없다.&#10;&#10;부모 메소드의 내용을 가지고 오고싶을때는 &#10;super.메소드이름을 사용한다.&#10;&#10;부모클래서에서 작선된 메소드에 내용을 추가할 때는 용이하지만 내용을 바꿀 때는 이용할 수 없다." />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;final 클래스 &#10;final 메소드&#10;protected 접근 제한자&#10;&#10;final 클래스는 더이상 자식 클래스를 가질 수 없다. 즉 상속 불가&#10;&#10;final 메소드는 메소드 오버라이딩을 할 수 없다.&#10;&#10;protected 접근제한자&#10;같은 패키지에서는 default 처럼 접근이 가능하나 다른 패키지에서는 자식 클래스만 접근을 허용한다&#10;new 연산자를 통해 객체를 직접 생성하여 이용할 수 없고 오로지 상속을 통해서만 이용이 가능하다." />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;클래스의 자동 타입 변환&#10;클래스의 강제 타입 변환&#10;&#10;----자동 타입 변환------&#10;클래스의 타입 변환은 상속관계에 있는 클래스 사이에서 발생한다.&#10;바로 위의 부모가 아니더라도 상속계층에서 상위 타입이라면 자동 타입변환이 일어날 수 있다.&#10;&#10;부모 타입으로 자동타입 변환된 이후에는 부모 클래스에 선언된 필드와 메소드만 접근이 가능하고 자식 클래스에서 오버라이딩된 메소드가 있다면 부모 메소드 대신 오버라이딩된 메소드가 호출된다.&#10;&#10;----강제 타입 변환------&#10;캐스팅 연산자로 강제 타입 변환을 할 수 있다.&#10;&#10;자식 객체가 부모타입으로 자동 변환하면 부모타입에서 선언된 필드와 메소드만 사용가능하다는 제약사항이 있다.&#10;만약 자식 타입에 선언된 필드와 메소드를 꼭 사용해야 한다면 강제 타입 변환을 해서 다시 자식 타입으로 변환해야 한다." />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;다형성&#10;필드 다형성&#10;매개변수의 다형성&#10;&#10;다형성이란 사용방법은 동일하지만 실행결과가 다양하게 나오는 성질을 말한다.&#10;&#10;객체 사용방법이 동일하다는 것은 동일한 메소드를 가지고 있다는 뜻이다.&#10;&#10;&#10;------필드 다형성------&#10;필드 타입은 동일하지만, 대입되는 객체가 달라져서 실행결과가 다양하게 나올 수 있는 것을 말한다.&#10;&#10;----매개변수 다형성---&#10;메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 호출할 때 동일한 타입의 객체를 제공하는 것이 정석이지만 자식객체를 제공할 수도 있다. 여기서 다형성이 발생한다." />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;instanceof&#10;추상 메소드&#10;추상 클래스&#10;-------instanceof-----&#10;변수가 참조하는 객체의 타입을 확인하고자 할때 사용한다&#10;instanceof연산자의 좌항에는 객체가 우항에는 타입이 오고&#10;좌항의 객체가 우항의 타입이 아니면 true를 그렇지 않다면 false를 리턴&#10;-------추상클래스------&#10;클래스들의 공통적인 필드나 메소드를 추출해서 선언한 클래스를 추상클래스 라고 한다&#10;추상클래스는 실체 클래스의 부모역할을 한다.&#10;&#10;new 연산자를 사용해서 객체를 직접 생성할 수 없고 extends 뒤에만 올수 있다.&#10;&#10;&#10;------추상 메소드-------&#10;추상메소드는 추상클래스 내에서만 선언할 수 있고, 메소드 실행내용인 중괄호가 없다.&#10;&#10;추상메소드는 자식클래스의 공통 메소드라는 것만 정의할뿐 실행내용을 가지지 않는다.&#10;&#10;추상메소드는 반드시 자식클래스에서 재정의해서 실행 내용을 채워야한다." />
    <MESSAGE value="----이것이 자바다----&#10;ch7&#10;interface&#10;&#10;인터페이스는 두 객체를 연결하는 역할을 한다.&#10;인터페이스는 다형성을 구현하는 방법중 하나이다.&#10;&#10;인터페이스는 default 와 public 접근제한자를 가질 수 있다.&#10;인터페이스는 상수 필드 추상메소드 디폴트 메소드 정적 메소드 등을 가질 수 있고&#10;&#10;필드에서 별다른 제약을 주지 않아도 기본적으로 상수로 선언되며&#10;메소드는 형식을 선언하지 않으면 기본 추상메소드로 생성된다." />
    <MESSAGE value="----이것이 자바다----&#10;ch8&#10;interface의 디폴트 메소드&#10;&#10;인터페이스에는 완전한 실행코드를 가진 디폴트 메소드를 선언할 수 있다.&#10;디폴트 메소드의 실행부에는 상수필드를 읽거나 추상메소드를 호출하는 코드를 작성할 수 있다.&#10;&#10;디폴트 메소드는 구현 객체가 필요한 메소드이다.&#10;구현 클래스는 디폴트 메소드를 재정의 해서 자신에게 맞게 수정할 수도 있지만,&#10;재정의시 public 접근 제한자를 반드시 붙여야 하고, default 키워드를 생략해야 한다." />
    <MESSAGE value="----이것이 자바다----&#10;ch8&#10;interface의 정적메소드&#10;interface의 private 메소드&#10;&#10;interface의 private 메소드 &#10;Java 9 부터 사용가능&#10;&#10;interface의 정적 메소드&#10;인터페이스 자체의 기능을 위해 선언한다.&#10;정적메소드는 구현객체가 없어도 인터페이스만으로 호출할 수 있고&#10;public 을 생략하더라도 자동으로 컴파이로가정에서 붙는 것이 차이점이다.&#10;&#10;정적 메소드의 실행부를 작성할 때 주의할 점은 상수필드를 제외한 추상메소드,디폴트메소드,private메소드 등을 호출할 수 없다는 것이다." />
    <MESSAGE value="----이것이 자바다----&#10;ch8&#10;다중 인터페이스&#10;인터페이스의 상속&#10;&#10;구현 객체는 여러개의 인터페이스를 implements할 수 있다.&#10;구현 객체가 어떤 인터페이스 변수에 대입되느냐에 따라 변수를 통해 호출할 수 있는 추상 메소드가 결정된다.&#10;&#10;인터페이스도 다른 인터페이스를 상속할 수 있으며, 클래스와는 달리 다중상속을 허용한다.&#10;자식 인터페이스의 구현 클래스는 자식 인터페이스의 메소드뿐만 아니라 부모인터페이스의 모든 추상메소드를 재정의 해야한다." />
    <option name="LAST_COMMIT_MESSAGE" value="----이것이 자바다----&#10;ch8&#10;다중 인터페이스&#10;인터페이스의 상속&#10;&#10;구현 객체는 여러개의 인터페이스를 implements할 수 있다.&#10;구현 객체가 어떤 인터페이스 변수에 대입되느냐에 따라 변수를 통해 호출할 수 있는 추상 메소드가 결정된다.&#10;&#10;인터페이스도 다른 인터페이스를 상속할 수 있으며, 클래스와는 달리 다중상속을 허용한다.&#10;자식 인터페이스의 구현 클래스는 자식 인터페이스의 메소드뿐만 아니라 부모인터페이스의 모든 추상메소드를 재정의 해야한다." />
  </component>
</project>